Parsing file: "a+a.tig"
Starting parse
Entering state 0
Reading a token
Next token is token identifier (a+a.tig:1.1: a)
Shifting token identifier (a+a.tig:1.1: a)
Entering state 2
Reading a token
Next token is token + (a+a.tig:1.3: )
Reducing stack 0 by rule 92 (line 620):
   $1 = token identifier (a+a.tig:1.1: a)
-> $$ = nterm varid (a+a.tig:1.1: a)
Entering state 35
Reducing stack 0 by rule 39 (line 415):
   $1 = nterm varid (a+a.tig:1.1: a)
-> $$ = nterm lvalue (a+a.tig:1.1: a)
Entering state 27
Next token is token + (a+a.tig:1.3: )
Reducing stack 0 by rule 36 (line 408):
   $1 = nterm lvalue (a+a.tig:1.1: a)
-> $$ = nterm exp.1 (a+a.tig:1.1: a)
Entering state 26
Reducing stack 0 by rule 35 (line 403):
   $1 = nterm exp.1 (a+a.tig:1.1: a)
-> $$ = nterm exp (a+a.tig:1.1: a)
Entering state 25
Next token is token + (a+a.tig:1.3: )
Shifting token + (a+a.tig:1.3: )
Entering state 76
Reading a token
Next token is token string (a+a.tig:1.5-7: a)
Shifting token string (a+a.tig:1.5-7: a)
Entering state 1
Reducing stack 0 by rule 4 (line 309):
   $1 = token string (a+a.tig:1.5-7: a)
-> $$ = nterm exp (a+a.tig:1.5-7: "a")
Entering state 122
Reading a token
Now at end of input.
Reducing stack 0 by rule 29 (line 389):
   $1 = nterm exp (a+a.tig:1.1: a)
   $2 = token + (a+a.tig:1.3: )
   $3 = nterm exp (a+a.tig:1.5-7: "a")
-> $$ = nterm exp (a+a.tig:1.1-7: (a + "a"))
Entering state 25
Now at end of input.
Reducing stack 0 by rule 1 (line 298):
   $1 = nterm exp (a+a.tig:1.1-7: (a + "a"))
-> $$ = nterm program (a+a.tig:1.1-7: )
Entering state 24
Now at end of input.
Shifting token end of file (a+a.tig:2.1: )
Entering state 65
Cleanup: popping token end of file (a+a.tig:2.1: )
Cleanup: popping nterm program (a+a.tig:1.1-7: )
Parsing string: function _main() = (_exp(0); ())
Starting parse
Entering state 0
Reading a token
Next token is token function (:1.1-8: )
Shifting token function (:1.1-8: )
Entering state 8
Reading a token
Next token is token identifier (:1.10-14: _main)
Shifting token identifier (:1.10-14: _main)
Entering state 45
Reading a token
Next token is token ( (:1.15: )
Shifting token ( (:1.15: )
Entering state 96
Reading a token
Next token is token ) (:1.16: )
Reducing stack 0 by rule 97 (line 640):
-> $$ = nterm funargs (:1.16: )
Entering state 148
Next token is token ) (:1.16: )
Shifting token ) (:1.16: )
Entering state 191
Reading a token
Next token is token = (:1.18: )
Reducing stack 0 by rule 88 (line 602):
-> $$ = nterm typeid.opt (:1.17: )
Entering state 220
Next token is token = (:1.18: )
Shifting token = (:1.18: )
Entering state 236
Reading a token
Next token is token ( (:1.20: )
Shifting token ( (:1.20: )
Entering state 12
Reading a token
Next token is token _exp (:1.21-24: )
Shifting token _exp (:1.21-24: )
Entering state 20
Reading a token
Next token is token ( (:1.25: )
Shifting token ( (:1.25: )
Entering state 61
Reading a token
Next token is token integer (:1.26: 0)
Shifting token integer (:1.26: 0)
Entering state 108
Reading a token
Next token is token ) (:1.27: )
Shifting token ) (:1.27: )
Entering state 167
Reducing stack 0 by rule 38 (line 410):
   $1 = token _exp (:1.21-24: )
   $2 = token ( (:1.25: )
   $3 = token integer (:1.26: 0)
   $4 = token ) (:1.27: )
-> $$ = nterm exp.1 (:1.21-27: (a + "a"))
Entering state 26
Reducing stack 0 by rule 35 (line 403):
   $1 = nterm exp.1 (:1.21-27: (a + "a"))
-> $$ = nterm exp (:1.21-27: (a + "a"))
Entering state 50
Reading a token
Next token is token ; (:1.28: )
Reducing stack 0 by rule 50 (line 442):
   $1 = nterm exp (:1.21-27: (a + "a"))
-> $$ = nterm exps.1 (:1.21-27: (a + "a"))
Entering state 51
Next token is token ; (:1.28: )
Shifting token ; (:1.28: )
Entering state 102
Reading a token
Next token is token ( (:1.30: )
Shifting token ( (:1.30: )
Entering state 12
Reading a token
Next token is token ) (:1.31: )
Reducing stack 0 by rule 54 (line 454):
-> $$ = nterm exps.0.2 (:1.31: )
Entering state 53
Next token is token ) (:1.31: )
Shifting token ) (:1.31: )
Entering state 103
Reducing stack 0 by rule 11 (line 334):
   $1 = token ( (:1.30: )
   $2 = nterm exps.0.2 (:1.31: )
   $3 = token ) (:1.31: )
-> $$ = nterm exp (:1.30-31: ())
Entering state 157
Reading a token
Next token is token ) (:1.32: )
Reducing stack 0 by rule 53 (line 449):
   $1 = nterm exps.1 (:1.21-27: (a + "a"))
   $2 = token ; (:1.28: )
   $3 = nterm exp (:1.30-31: ())
-> $$ = nterm exps.2 (:1.21-31: (a + "a"), ())
Entering state 52
Reducing stack 0 by rule 55 (line 455):
   $1 = nterm exps.2 (:1.21-31: (a + "a"), ())
-> $$ = nterm exps.0.2 (:1.21-31: (a + "a"), ())
Entering state 53
Next token is token ) (:1.32: )
Shifting token ) (:1.32: )
Entering state 103
Reducing stack 0 by rule 11 (line 334):
   $1 = token ( (:1.20: )
   $2 = nterm exps.0.2 (:1.21-31: (a + "a"), ())
   $3 = token ) (:1.32: )
-> $$ = nterm exp (:1.20-32: (
  (a + "a");
  ()
))
Entering state 244
Reading a token
Now at end of input.
Reducing stack 0 by rule 95 (line 633):
   $1 = token function (:1.1-8: )
   $2 = token identifier (:1.10-14: _main)
   $3 = token ( (:1.15: )
   $4 = nterm funargs (:1.16: )
   $5 = token ) (:1.16: )
   $6 = nterm typeid.opt (:1.17: )
   $7 = token = (:1.18: )
   $8 = nterm exp (:1.20-32: (
  (a + "a");
  ()
))
-> $$ = nterm fundec (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
Entering state 37
Now at end of input.
Reducing stack 0 by rule 93 (line 628):
   $1 = nterm fundec (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
-> $$ = nterm funchunk (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
Entering state 36
Now at end of input.
Reducing stack 0 by rule 56 (line 474):
-> $$ = nterm chunks (:1.33: )
Entering state 85
Reducing stack 0 by rule 59 (line 478):
   $1 = nterm funchunk (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
   $2 = nterm chunks (:1.33: )
-> $$ = nterm chunks (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
Entering state 29
Reducing stack 0 by rule 2 (line 301):
   $1 = nterm chunks (:1.1-32: 
function _main() =
  (
    (a + "a");
    ()
  ))
-> $$ = nterm program (:1.1-32: )
Entering state 24
Now at end of input.
Shifting token end of file (:1.33: )
Entering state 65
Cleanup: popping token end of file (:1.33: )
Cleanup: popping nterm program (:1.1-32: )
